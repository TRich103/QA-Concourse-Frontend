// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Calendar should be able to render the Calendar with properties received from a parent 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Calendar
    end_date_title="Test End Date"
    start_date_title="Test Start Date"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <label>
          Test Start Date
        </label>,
        <div>
          <DayPickerInput
            classNames={
              Object {
                "container": "DayPickerInput",
                "overlay": "DayPickerInput-Overlay",
                "overlayWrapper": "DayPickerInput-OverlayWrapper",
              }
            }
            clickUnselectsDay={false}
            component="input"
            dayPickerProps={
              Object {
                "disabledDays": Object {
                  "daysOfWeek": Array [
                    0,
                    6,
                  ],
                },
                "month": "",
                "selectedDays": "",
              }
            }
            format="DD/MM/YYYY"
            formatDate={[Function]}
            hideOnDayClick={true}
            inputProps={Object {}}
            keepFocus={true}
            onDayChange={[Function]}
            overlayComponent={[Function]}
            parseDate={[Function]}
            placeholder="DD/MM/YYYY"
            showOverlay={false}
            value=""
          />
        </div>,
        <br />,
        <label>
           
          Test End Date
        </label>,
        <div>
          <DayPickerInput
            classNames={
              Object {
                "container": "DayPickerInput",
                "overlay": "DayPickerInput-Overlay",
                "overlayWrapper": "DayPickerInput-OverlayWrapper",
              }
            }
            clickUnselectsDay={false}
            component="input"
            dayPickerProps={
              Object {
                "disabledDays": Object {
                  "daysOfWeek": Array [
                    0,
                    6,
                  ],
                },
                "month": "",
                "selectedDays": "",
              }
            }
            format="DD/MM/YYYY"
            formatDate={[Function]}
            hideOnDayClick={true}
            inputProps={Object {}}
            keepFocus={true}
            onDayChange={[Function]}
            overlayComponent={[Function]}
            parseDate={[Function]}
            placeholder="DD/MM/YYYY"
            showOverlay={false}
            value=""
          />
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Test Start Date",
        },
        "ref": null,
        "rendered": "Test Start Date",
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <DayPickerInput
            classNames={
              Object {
                "container": "DayPickerInput",
                "overlay": "DayPickerInput-Overlay",
                "overlayWrapper": "DayPickerInput-OverlayWrapper",
              }
            }
            clickUnselectsDay={false}
            component="input"
            dayPickerProps={
              Object {
                "disabledDays": Object {
                  "daysOfWeek": Array [
                    0,
                    6,
                  ],
                },
                "month": "",
                "selectedDays": "",
              }
            }
            format="DD/MM/YYYY"
            formatDate={[Function]}
            hideOnDayClick={true}
            inputProps={Object {}}
            keepFocus={true}
            onDayChange={[Function]}
            overlayComponent={[Function]}
            parseDate={[Function]}
            placeholder="DD/MM/YYYY"
            showOverlay={false}
            value=""
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "classNames": Object {
              "container": "DayPickerInput",
              "overlay": "DayPickerInput-Overlay",
              "overlayWrapper": "DayPickerInput-OverlayWrapper",
            },
            "clickUnselectsDay": false,
            "component": "input",
            "dayPickerProps": Object {
              "disabledDays": Object {
                "daysOfWeek": Array [
                  0,
                  6,
                ],
              },
              "month": "",
              "selectedDays": "",
            },
            "format": "DD/MM/YYYY",
            "formatDate": [Function],
            "hideOnDayClick": true,
            "inputProps": Object {},
            "keepFocus": true,
            "onDayChange": [Function],
            "overlayComponent": [Function],
            "parseDate": [Function],
            "placeholder": "DD/MM/YYYY",
            "showOverlay": false,
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "br",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            " ",
            "Test End Date",
          ],
        },
        "ref": null,
        "rendered": Array [
          " ",
          "Test End Date",
        ],
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <DayPickerInput
            classNames={
              Object {
                "container": "DayPickerInput",
                "overlay": "DayPickerInput-Overlay",
                "overlayWrapper": "DayPickerInput-OverlayWrapper",
              }
            }
            clickUnselectsDay={false}
            component="input"
            dayPickerProps={
              Object {
                "disabledDays": Object {
                  "daysOfWeek": Array [
                    0,
                    6,
                  ],
                },
                "month": "",
                "selectedDays": "",
              }
            }
            format="DD/MM/YYYY"
            formatDate={[Function]}
            hideOnDayClick={true}
            inputProps={Object {}}
            keepFocus={true}
            onDayChange={[Function]}
            overlayComponent={[Function]}
            parseDate={[Function]}
            placeholder="DD/MM/YYYY"
            showOverlay={false}
            value=""
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "classNames": Object {
              "container": "DayPickerInput",
              "overlay": "DayPickerInput-Overlay",
              "overlayWrapper": "DayPickerInput-OverlayWrapper",
            },
            "clickUnselectsDay": false,
            "component": "input",
            "dayPickerProps": Object {
              "disabledDays": Object {
                "daysOfWeek": Array [
                  0,
                  6,
                ],
              },
              "month": "",
              "selectedDays": "",
            },
            "format": "DD/MM/YYYY",
            "formatDate": [Function],
            "hideOnDayClick": true,
            "inputProps": Object {},
            "keepFocus": true,
            "onDayChange": [Function],
            "overlayComponent": [Function],
            "parseDate": [Function],
            "placeholder": "DD/MM/YYYY",
            "showOverlay": false,
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label>
            Test Start Date
          </label>,
          <div>
            <DayPickerInput
              classNames={
                Object {
                  "container": "DayPickerInput",
                  "overlay": "DayPickerInput-Overlay",
                  "overlayWrapper": "DayPickerInput-OverlayWrapper",
                }
              }
              clickUnselectsDay={false}
              component="input"
              dayPickerProps={
                Object {
                  "disabledDays": Object {
                    "daysOfWeek": Array [
                      0,
                      6,
                    ],
                  },
                  "month": "",
                  "selectedDays": "",
                }
              }
              format="DD/MM/YYYY"
              formatDate={[Function]}
              hideOnDayClick={true}
              inputProps={Object {}}
              keepFocus={true}
              onDayChange={[Function]}
              overlayComponent={[Function]}
              parseDate={[Function]}
              placeholder="DD/MM/YYYY"
              showOverlay={false}
              value=""
            />
          </div>,
          <br />,
          <label>
             
            Test End Date
          </label>,
          <div>
            <DayPickerInput
              classNames={
                Object {
                  "container": "DayPickerInput",
                  "overlay": "DayPickerInput-Overlay",
                  "overlayWrapper": "DayPickerInput-OverlayWrapper",
                }
              }
              clickUnselectsDay={false}
              component="input"
              dayPickerProps={
                Object {
                  "disabledDays": Object {
                    "daysOfWeek": Array [
                      0,
                      6,
                    ],
                  },
                  "month": "",
                  "selectedDays": "",
                }
              }
              format="DD/MM/YYYY"
              formatDate={[Function]}
              hideOnDayClick={true}
              inputProps={Object {}}
              keepFocus={true}
              onDayChange={[Function]}
              overlayComponent={[Function]}
              parseDate={[Function]}
              placeholder="DD/MM/YYYY"
              showOverlay={false}
              value=""
            />
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Test Start Date",
          },
          "ref": null,
          "rendered": "Test Start Date",
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <DayPickerInput
              classNames={
                Object {
                  "container": "DayPickerInput",
                  "overlay": "DayPickerInput-Overlay",
                  "overlayWrapper": "DayPickerInput-OverlayWrapper",
                }
              }
              clickUnselectsDay={false}
              component="input"
              dayPickerProps={
                Object {
                  "disabledDays": Object {
                    "daysOfWeek": Array [
                      0,
                      6,
                    ],
                  },
                  "month": "",
                  "selectedDays": "",
                }
              }
              format="DD/MM/YYYY"
              formatDate={[Function]}
              hideOnDayClick={true}
              inputProps={Object {}}
              keepFocus={true}
              onDayChange={[Function]}
              overlayComponent={[Function]}
              parseDate={[Function]}
              placeholder="DD/MM/YYYY"
              showOverlay={false}
              value=""
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "classNames": Object {
                "container": "DayPickerInput",
                "overlay": "DayPickerInput-Overlay",
                "overlayWrapper": "DayPickerInput-OverlayWrapper",
              },
              "clickUnselectsDay": false,
              "component": "input",
              "dayPickerProps": Object {
                "disabledDays": Object {
                  "daysOfWeek": Array [
                    0,
                    6,
                  ],
                },
                "month": "",
                "selectedDays": "",
              },
              "format": "DD/MM/YYYY",
              "formatDate": [Function],
              "hideOnDayClick": true,
              "inputProps": Object {},
              "keepFocus": true,
              "onDayChange": [Function],
              "overlayComponent": [Function],
              "parseDate": [Function],
              "placeholder": "DD/MM/YYYY",
              "showOverlay": false,
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              " ",
              "Test End Date",
            ],
          },
          "ref": null,
          "rendered": Array [
            " ",
            "Test End Date",
          ],
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <DayPickerInput
              classNames={
                Object {
                  "container": "DayPickerInput",
                  "overlay": "DayPickerInput-Overlay",
                  "overlayWrapper": "DayPickerInput-OverlayWrapper",
                }
              }
              clickUnselectsDay={false}
              component="input"
              dayPickerProps={
                Object {
                  "disabledDays": Object {
                    "daysOfWeek": Array [
                      0,
                      6,
                    ],
                  },
                  "month": "",
                  "selectedDays": "",
                }
              }
              format="DD/MM/YYYY"
              formatDate={[Function]}
              hideOnDayClick={true}
              inputProps={Object {}}
              keepFocus={true}
              onDayChange={[Function]}
              overlayComponent={[Function]}
              parseDate={[Function]}
              placeholder="DD/MM/YYYY"
              showOverlay={false}
              value=""
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "classNames": Object {
                "container": "DayPickerInput",
                "overlay": "DayPickerInput-Overlay",
                "overlayWrapper": "DayPickerInput-OverlayWrapper",
              },
              "clickUnselectsDay": false,
              "component": "input",
              "dayPickerProps": Object {
                "disabledDays": Object {
                  "daysOfWeek": Array [
                    0,
                    6,
                  ],
                },
                "month": "",
                "selectedDays": "",
              },
              "format": "DD/MM/YYYY",
              "formatDate": [Function],
              "hideOnDayClick": true,
              "inputProps": Object {},
              "keepFocus": true,
              "onDayChange": [Function],
              "overlayComponent": [Function],
              "parseDate": [Function],
              "placeholder": "DD/MM/YYYY",
              "showOverlay": false,
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
